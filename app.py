import streamlit as st
import os

from src.data.azure_client import AzureDevOpsClient
from src.analysis.sprint_analyzer import SprintAnalyzer
from src.analysis.report_generator import ReportGenerator
from src.ui.components import init_session_state, render_sidebar
from src.ui.pages import render_sprint_analysis_page, render_distribution_analysis_page

# Configura칞칚o do logger
import logging

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def main():
    """Fun칞칚o principal da aplica칞칚o de an치lise de Sprint do Azure DevOps"""
    # Configura칞칚o da p치gina
    st.set_page_config(page_title="An치lise de Sprint", page_icon="游늵", layout="wide")

    # Inicializa칞칚o do estado da aplica칞칚o
    init_session_state()

    # Interface do usu치rio
    st.title("游늵 An치lise de Sprint")
    st.markdown("### ")

    # Renderizar sidebar e obter credenciais
    credenciais = render_sidebar()

    # Container principal
    with st.container():
        # Verificar credenciais
        if not all([credenciais["org"], credenciais["project"], credenciais["pat"]]):
            st.warning(
                "游녣 Primeiro, insira as credenciais no menu lateral para continuar."
            )
            st.stop()

        try:
            # Configura vari치veis de ambiente tempor치rias (apenas para esta sess칚o)
            os.environ["AZURE_DEVOPS_ORG"] = credenciais["org"]
            os.environ["AZURE_DEVOPS_PROJECT"] = credenciais["project"]
            if credenciais["team"]:
                os.environ["AZURE_DEVOPS_TEAM"] = credenciais["team"]
            os.environ["AZURE_DEVOPS_PAT"] = credenciais["pat"]

            # Inicializa o cliente e analisador
            client = AzureDevOpsClient(
                credenciais["org"],
                credenciais["project"],
                credenciais["team"],
                credenciais["pat"],
            )

            analyzer = SprintAnalyzer(client)
            report_generator = ReportGenerator(analyzer)

            # Obt칠m a lista de sprints
            with st.spinner("Conectando ao Azure DevOps..."):
                sprints = client.get_sprints()
                sprint_names = [sprint["name"] for sprint in sprints]

            # Op칞칫es de an치lise
            st.markdown("## Escolha o tipo de an치lise")
            analysis_type = st.radio(
                "Selecione o tipo de an치lise:",
                ["An치lise de Sprint Conclu칤da", "Meta de Distribui칞칚o de Tasks"],
                horizontal=True,
            )

            # Sele칞칚o de sprint comum para ambos os tipos
            col1, col2, col3 = st.columns([1, 1, 3])

            with col1:
                selected_sprint = st.selectbox("Selecione a Sprint:", sprint_names)

            # Renderiza a interface baseada no tipo de an치lise
            if analysis_type == "An치lise de Sprint Conclu칤da":
                render_sprint_analysis_page(
                    selected_sprint, analyzer, report_generator, col2
                )
            else:
                render_distribution_analysis_page(selected_sprint, analyzer, col2, col3)

        except Exception as e:
            st.error(f"Erro ao conectar ou processar dados: {str(e)}")
            st.write("丘멆잺 Verifique suas credenciais e tente novamente.")
            logger.error(f"Erro: {str(e)}", exc_info=True)


if __name__ == "__main__":
    main()
